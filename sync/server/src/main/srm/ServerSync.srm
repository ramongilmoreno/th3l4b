#
# Model for synchronization of clients.
#

model "Server sync";

# 
# Each client points to an status, even though the status might have been deleted (not really removed, only marked as deleted)
# The status is inmutable and contains the changes (contents) that were introduced when the status was added to the system.
# When a client wants to post new changes, a new status is created
# The new status stores the changes in the contents field
# All other statuses that were live (non deleted) are deleted (marked for deleted)
# Those statuses that were live are related to the new status with the merge entity: from the old statuses to the new status.
# In the case no changes are introduced (the client just syncs) if only one status is live, the client moves to that status.
# In the case no changes are introduced (the client just syncs) but more than one status exists, a new status (with its relationship, but no contents) is created related to all previous live statuses (that get deleted) 
# To compute the updates, the directed acyclic graph (DAG) from the new status is reversed until the original status or ancestor is found. 
# 


entity "Status" {
   field "Contents";
};

entity "Merge" {
    reference "Status" "From" reverse "Leads to";
    reference "Status" "To" reverse "Comes from";
};

entity "Client" {
    reference "Status";
};
