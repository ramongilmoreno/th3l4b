#
# SRM Template for in memory finder implementation
#

unit: model
names: com.th3l4b.srm.codegen.java.base.JavaNames java
file: <%=com.th3l4b.srm.codegen.template.runtime.CodegenUtils.pkgToDir(properties)%>/inmemory/Abstract<%=java.name(model)%>InMemoryFinder.java
content:

package <% java.lang.String pkg = com.th3l4b.srm.codegen.template.runtime.CodegenUtils.pkg(properties); %><%= pkg %>.inmemory;
<% java.lang.String name = java.name(model); %>
public abstract class Abstract<%= name %>InMemoryFinder extends com.th3l4b.srm.codegen.java.runtime.AbstractInMemoryFinder implements <%= pkg %>.I<%= name %>Finder {

<% for (com.th3l4b.srm.model.base.IEntity e: model) { java.lang.String ename = java.name(e); %>
    public java.lang.Iterable<<%= pkg %>.entities.I<%= ename %>> all<%= ename %> () throws java.lang.Exception {
    	java.util.ArrayList<<%= pkg %>.entities.I<%= ename %>> r = new java.util.ArrayList<<%= pkg %>.entities.I<%= ename %>>();
    	all(<%= pkg %>.entities.I<%= ename %>.class, r);
    	return r;
    }
    
    public <%= pkg %>.entities.I<%= ename %> find<%= ename %> (java.lang.String id) throws java.lang.Exception {
		return find("<%=com.th3l4b.common.text.codegen.JavaEscape.javaText(e.getName())%>", id, <%= pkg %>.entities.I<%= ename %>.class);
    }
<% } %>
}
